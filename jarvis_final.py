#!/usr/bin/env python3
"""
Jarvis Final - Vers√£o que funciona completamente
"""

import os
import sys
import time
import logging
import subprocess
import threading
import queue
import json
from typing import Dict, Callable, Optional
import sounddevice as sd
import numpy as np
import pvporcupine
import vosk
from pathlib import Path
import pygame
from gtts import gTTS
import tempfile
import os
from datetime import datetime


class JarvisFinal:
    """Vers√£o final do assistente Jarvis"""
    
    def __init__(self, hotword: str = "jarvis", model_path: str = None):
        self.hotword = hotword.lower()
        self.is_listening = False
        self.is_processing_command = False
        
        # Configura√ß√µes personaliz√°veis
        self.nome = "Gustavo"  # Nome para personaliza√ß√£o
        self.cmatrix_process = None  # Processo do cmatrix
        self.cmatrix_control_file = "/tmp/jarvis_cmatrix_control"  # Arquivo de controle
        
        # Configura√ß√£o de √°udio
        self.sample_rate = 16000
        self.chunk_size = 1024
        self.audio_queue = queue.Queue()
        
        # Configura√ß√£o de logging
        self._setup_logging()
        
        # Iniciar cmatrix em tela separada (ap√≥s logger estar pronto)
        self._start_cmatrix()
        
        # Inicializa√ß√£o dos componentes
        self._init_pygame()
        self._init_tts()
        self._init_porcupine()
        self._init_vosk(model_path)
        self._init_command_mapping()
        
        # Tocar som de inicializa√ß√£o
        self._play_startup_sound()
        
        self.logger.info("Jarvis Final inicializado com sucesso!")
    
    def _setup_logging(self):
        """Configura o sistema de logging"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('jarvis_final.log'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        self.logger = logging.getLogger('JarvisFinal')
    
    def _init_pygame(self):
        """Inicializa o pygame para reprodu√ß√£o de sons"""
        try:
            pygame.mixer.init()
            self.logger.info("‚úÖ Pygame inicializado para reprodu√ß√£o de sons")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è  Erro ao inicializar pygame: {e}")
            self.logger.info("üí° Som de ativa√ß√£o n√£o estar√° dispon√≠vel")
    
    def _init_tts(self):
        """Inicializa o sistema de s√≠ntese de voz com gTTS"""
        # TTS desabilitado por enquanto - descomente quando quiser usar
        self.tts_lang = None
        self.tts_slow = False
        self.logger.info("üîá Sistema de s√≠ntese de voz desabilitado")
        
        # C√≥digo original comentado para uso futuro:
        # try:
        #     # Configurar gTTS para portugu√™s brasileiro
        #     self.tts_lang = 'pt-br'  # Portugu√™s brasileiro
        #     self.tts_slow = False    # Velocidade normal (mais natural)
        #     
        #     self.logger.info("‚úÖ Sistema de s√≠ntese de voz gTTS inicializado")
        #     self.logger.info(f"üåç Idioma configurado: {self.tts_lang}")
        # except Exception as e:
        #     self.logger.warning(f"‚ö†Ô∏è  Erro ao inicializar gTTS: {e}")
        #     self.logger.info("üí° Respostas por voz n√£o estar√£o dispon√≠veis")
        #     self.tts_lang = None
    
    def _play_startup_sound(self):
        """Reproduz som de inicializa√ß√£o"""
        try:
            sound_file = os.path.join(os.getcwd(), 'ligar.mp3')
            if os.path.exists(sound_file):
                pygame.mixer.music.load(sound_file)
                pygame.mixer.music.play()
                
                # Aguardar a reprodu√ß√£o terminar
                while pygame.mixer.music.get_busy():
                    pygame.time.wait(100)
                    
                self.logger.info("‚úÖ Som de inicializa√ß√£o reproduzido")
            else:
                self.logger.warning(f"‚ö†Ô∏è  Arquivo de som de inicializa√ß√£o n√£o encontrado: {sound_file}")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è  Erro ao reproduzir som de inicializa√ß√£o: {e}")
    
    def _play_activation_sound(self):
        """Reproduz o som de ativa√ß√£o"""
        try:
            sound_file = os.path.join(os.getcwd(), 'listen.mp3')
            if os.path.exists(sound_file):
                pygame.mixer.music.load(sound_file)
                pygame.mixer.music.play()
                self.logger.info("üîä Som de ativa√ß√£o reproduzido")
            else:
                self.logger.warning(f"‚ö†Ô∏è  Arquivo de som n√£o encontrado: {sound_file}")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è  Erro ao reproduzir som: {e}")
    
    def _speak(self, text: str, force_speak: bool = False):
        """Fala o texto usando gTTS - apenas para comando ol√°"""
        if force_speak:
            # Apenas para o comando ol√° - ativa TTS temporariamente
            try:
                self.logger.info(f"üó£Ô∏è  Falando: {text}")
                
                # Configurar gTTS temporariamente
                tts_lang = 'pt-br'
                tts_slow = False
                
                # Criar arquivo tempor√°rio para o √°udio
                with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_file:
                    temp_path = tmp_file.name
                
                # Gerar √°udio com gTTS
                tts = gTTS(text=text, lang=tts_lang, slow=tts_slow)
                tts.save(temp_path)
                
                # Reproduzir o √°udio
                pygame.mixer.music.load(temp_path)
                pygame.mixer.music.play()
                
                # Aguardar a reprodu√ß√£o terminar
                while pygame.mixer.music.get_busy():
                    pygame.time.wait(100)
                
                # Limpar arquivo tempor√°rio
                os.unlink(temp_path)
                
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è  Erro ao falar com gTTS: {e}")
                self.logger.info(f"üí¨ {text}")
        else:
            # Para todos os outros comandos - apenas log
            self.logger.info(f"üí¨ [TTS DESABILITADO] {text}")
        
        # C√≥digo original comentado para uso futuro:
        # if self.tts_lang:
        #     try:
        #         self.logger.info(f"üó£Ô∏è  Falando: {text}")
        #         
        #         # Criar arquivo tempor√°rio para o √°udio
        #         with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_file:
        #             temp_path = tmp_file.name
        #         
        #         # Gerar √°udio com gTTS
        #         tts = gTTS(text=text, lang=self.tts_lang, slow=self.tts_slow)
        #         tts.save(temp_path)
        #         
        #         # Reproduzir o √°udio
        #         pygame.mixer.music.load(temp_path)
        #         pygame.mixer.music.play()
        #         
        #         # Aguardar a reprodu√ß√£o terminar
        #         while pygame.mixer.music.get_busy():
        #             pygame.time.wait(100)
        #         
        #         # Limpar arquivo tempor√°rio
        #         os.unlink(temp_path)
        #         
        #     except Exception as e:
        #         self.logger.warning(f"‚ö†Ô∏è  Erro ao falar com gTTS: {e}")
        #         self.logger.info(f"üí¨ {text}")
        # else:
        #     self.logger.info(f"üí¨ {text}")
    
    def _get_greeting(self):
        """Retorna sauda√ß√£o baseada na hora"""
        now = datetime.now()
        hour = now.hour
        
        if 5 <= hour < 12:
            return "Bom dia"
        elif 12 <= hour < 18:
            return "Boa tarde"
        else:
            return "Boa noite"
    
    def _get_time_string(self):
        """Retorna string formatada da hora atual"""
        now = datetime.now()
        return now.strftime("%H horas e %M minutos")
    
    def _init_porcupine(self):
        """Inicializa o Porcupine para detec√ß√£o de hotword"""
        try:
            access_key = os.getenv('PORCUPINE_ACCESS_KEY', '')
            
            if not access_key:
                raise Exception("Chave de acesso do Porcupine n√£o configurada")
            
            # Usar hotword padr√£o "jarvis" do Porcupine
            self.porcupine = pvporcupine.create(
                access_key=access_key,
                keywords=['jarvis']  # Sempre usar 'jarvis'
            )
            self.logger.info(f"‚úÖ Porcupine inicializado com hotword: jarvis")
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao inicializar Porcupine: {e}")
            self.logger.info("Usando modo de teste sem Porcupine")
            self.porcupine = None
    
    def _init_vosk(self, model_path: str = None):
        """Inicializa o Vosk para reconhecimento de voz"""
        try:
            if model_path is None:
                model_path = self._find_vosk_model()
            
            if model_path and os.path.exists(model_path):
                self.vosk_model = vosk.Model(model_path)
                self.vosk_recognizer = vosk.KaldiRecognizer(self.vosk_model, self.sample_rate)
                self.logger.info(f"‚úÖ Vosk inicializado com modelo: {model_path}")
            else:
                self.logger.warning("‚ö†Ô∏è  Modelo Vosk n√£o encontrado. Usando modo de teste.")
                self.vosk_model = None
                self.vosk_recognizer = None
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao inicializar Vosk: {e}")
            self.vosk_model = None
            self.vosk_recognizer = None
    
    def _find_vosk_model(self) -> Optional[str]:
        """Tenta encontrar um modelo Vosk instalado"""
        possible_paths = [
            "/usr/share/vosk-models",
            "/usr/local/share/vosk-models",
            os.path.expanduser("~/vosk-models"),
            "./vosk-models"
        ]
        
        for base_path in possible_paths:
            if os.path.exists(base_path):
                for model_dir in os.listdir(base_path):
                    model_path = os.path.join(base_path, model_dir)
                    if os.path.isdir(model_path):
                        return model_path
        return None
    
    def _init_command_mapping(self):
        """Inicializa o mapeamento de comandos"""
        self.commands = {
            "teste": self._test_command,
            "hora": self._show_time,
            "data": self._show_date,
            "ajuda": self._show_help,
            "navegador": self._open_browser,
            "status": self._system_status,
            "ol√°": self._greeting_command,
            "ola": self._greeting_command,
            "trabalho": self._work_mode_command,
            "m√∫sica": self._open_music,
            "musica": self._open_music,
            "biblioteca": self._open_library,
            "desliga": self._shutdown_command,
            "fechar": self._close_jarvis
        }
        
        self.logger.info(f"üìã Mapeamento de comandos inicializado com {len(self.commands)} comandos")
    
    def _start_cmatrix(self):
        """Inicia cmatrix em uma tela separada"""
        try:
            self.logger.info("üñ•Ô∏è  Iniciando interface tecnol√≥gica (cmatrix)...")
            
            # Verificar se cmatrix est√° dispon√≠vel
            result = subprocess.run(["which", "cmatrix"], capture_output=True, text=True)
            if result.returncode != 0:
                self.logger.warning("‚ö†Ô∏è  cmatrix n√£o encontrado, continuando sem interface visual")
                return
            
            # Criar arquivo de controle
            with open(self.cmatrix_control_file, "w") as f:
                f.write("RUNNING\n")
            
            # Criar script tempor√°rio para cmatrix
            cmatrix_script = "/tmp/jarvis_cmatrix.sh"
            with open(cmatrix_script, "w") as f:
                f.write("#!/bin/bash\n")
                f.write("CONTROL_FILE='" + self.cmatrix_control_file + "'\n")
                f.write("trap 'echo STOPPED > $CONTROL_FILE; kill $CMATRIX_PID 2>/dev/null; exit 0' SIGTERM\n")
                f.write("cmatrix -C green -s -a &\n")
                f.write("CMATRIX_PID=$!\n")
                f.write("while [ -f $CONTROL_FILE ] && [ \"$(cat $CONTROL_FILE)\" = \"RUNNING\" ]; do\n")
                f.write("    sleep 0.1\n")
                f.write("done\n")
                f.write("kill $CMATRIX_PID 2>/dev/null\n")
                f.write("rm -f $CONTROL_FILE\n")
            
            # Tornar execut√°vel
            os.chmod(cmatrix_script, 0o755)
            
            # Iniciar cmatrix em terminal separado
            cmatrix_cmd = [
                "gnome-terminal", 
                "--title=Jarvis Matrix Interface",
                "--geometry=80x24",
                "--",
                "bash", cmatrix_script
            ]
            
            # Tentar iniciar cmatrix e armazenar o processo
            self.cmatrix_process = subprocess.Popen(cmatrix_cmd, 
                                                   stdout=subprocess.DEVNULL, 
                                                   stderr=subprocess.DEVNULL)
            
            self.logger.info("‚úÖ Interface tecnol√≥gica iniciada!")
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è  Erro ao iniciar cmatrix: {e}")
            self.logger.info("üí° Jarvis continuar√° funcionando normalmente")
    
    def _stop_cmatrix(self):
        """Para o cmatrix se estiver rodando"""
        try:
            if os.path.exists(self.cmatrix_control_file):
                self.logger.info("üñ•Ô∏è  Fechando interface tecnol√≥gica (cmatrix)...")
                
                # Sinalizar para parar via arquivo de controle
                with open(self.cmatrix_control_file, "w") as f:
                    f.write("STOPPED\n")
                
                # Aguardar um pouco para o script processar
                time.sleep(1)
                
                # Limpar arquivo de controle
                if os.path.exists(self.cmatrix_control_file):
                    os.remove(self.cmatrix_control_file)
                
                # Matar processos relacionados como fallback
                subprocess.run(["pkill", "-f", "jarvis_cmatrix.sh"], 
                             capture_output=True, timeout=1)
                subprocess.run(["pkill", "-f", "cmatrix"], 
                             capture_output=True, timeout=1)
                
                self.logger.info("‚úÖ Interface tecnol√≥gica fechada!")
            else:
                self.logger.info("üí° Interface tecnol√≥gica j√° estava fechada")
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è  Erro ao fechar cmatrix: {e}")
            self.logger.info("üí° Continuando com o fechamento do Jarvis...")
    
    def _audio_callback(self, indata, frames, time, status):
        """Callback para captura de √°udio"""
        if status:
            self.logger.warning(f"Status de √°udio: {status}")
        
        audio_data = (indata[:, 0] * 32767).astype(np.int16)
        self.audio_queue.put(audio_data.tobytes())
    
    def _detect_hotword(self, audio_data: bytes) -> bool:
        """Detecta se a hotword foi pronunciada"""
        if self.porcupine is None:
            return False
        
        try:
            audio_array = np.frombuffer(audio_data, dtype=np.int16)
            frame_length = self.porcupine.frame_length
            
            if len(audio_array) >= frame_length:
                frame = audio_array[:frame_length]
                keyword_index = self.porcupine.process(frame)
                
                if keyword_index >= 0:
                    self.logger.info(f"üî• Hotword 'jarvis' detectada!")
                    self._play_activation_sound()
                    return True
            return False
        except Exception as e:
            self.logger.error(f"Erro na detec√ß√£o de hotword: {e}")
            return False
    
    def _recognize_speech(self, audio_data: bytes) -> str:
        """Reconhece fala usando Vosk"""
        if self.vosk_recognizer is None:
            return "teste"  # Comando padr√£o para teste
        
        try:
            if self.vosk_recognizer.AcceptWaveform(audio_data):
                result = json.loads(self.vosk_recognizer.Result())
                text = result.get('text', '').strip().lower()
                return text
            else:
                partial = json.loads(self.vosk_recognizer.PartialResult())
                partial_text = partial.get('partial', '').strip().lower()
                return partial_text
        except Exception as e:
            self.logger.error(f"Erro no reconhecimento de voz: {e}")
            return ""
    
    def _find_command(self, text: str) -> Optional[str]:
        """Encontra comando correspondente"""
        if not text:
            return None
        
        # Busca exata
        if text in self.commands:
            return text
        
        # Busca por palavras-chave
        words = text.split()
        for word in words:
            if word in self.commands:
                return word
        
        return None
    
    def _execute_command(self, command: str):
        """Executa o comando correspondente"""
        if command in self.commands:
            self.logger.info(f"üöÄ Executando comando: {command}")
            try:
                self.commands[command]()
                self.logger.info(f"‚úÖ Comando '{command}' executado com sucesso!")
            except Exception as e:
                self.logger.error(f"‚ùå Erro ao executar comando '{command}': {e}")
        else:
            self.logger.warning(f"‚ö†Ô∏è  Comando n√£o reconhecido: {command}")
            self.logger.info("üí° Comandos dispon√≠veis:")
            for cmd in sorted(self.commands.keys()):
                print(f"   - {cmd}")
    
    def _listen_for_command(self):
        """Escuta por comandos ap√≥s detec√ß√£o da hotword"""
        self.logger.info("üé§ Escutando comando... (fale devagar e claramente)")
        self.is_processing_command = True
        
        # Usar o mesmo m√©todo que funciona no manual
        duration = 4
        audio_data = sd.rec(int(duration * self.sample_rate), 
                           samplerate=self.sample_rate, 
                           channels=1, 
                           dtype=np.float32)
        sd.wait()
        
        # Converter para formato correto
        audio_int16 = (audio_data * 32767).astype(np.int16)
        command_audio = audio_int16.tobytes()
        
        # Reconhecer o comando
        recognized_text = self._recognize_speech(command_audio)
        
        if recognized_text:
            self.logger.info(f"üé§ Texto reconhecido: '{recognized_text}'")
            
            # Encontrar e executar comando
            command = self._find_command(recognized_text)
            if command:
                self._execute_command(command)
            else:
                self.logger.info("‚ùì Comando n√£o reconhecido")
                self.logger.info("üí° Comandos dispon√≠veis:")
                for cmd in sorted(self.commands.keys()):
                    print(f"   - {cmd}")
        else:
            self.logger.info("‚ùå Nenhum comando reconhecido")
            self.logger.info("üí° Tente falar mais devagar e claramente")
        
        self.is_processing_command = False
    
    def start_listening(self):
        """Inicia o loop principal de escuta"""
        self.logger.info("üéß Iniciando escuta cont√≠nua...")
        self.is_listening = True
        
        try:
            with sd.InputStream(
                samplerate=self.sample_rate,
                channels=1,
                dtype=np.float32,
                blocksize=self.chunk_size,
                callback=self._audio_callback
            ):
                while self.is_listening:
                    try:
                        audio_data = self.audio_queue.get(timeout=1.0)
                        
                        if self._detect_hotword(audio_data) and not self.is_processing_command:
                            command_thread = threading.Thread(target=self._listen_for_command)
                            command_thread.daemon = True
                            command_thread.start()
                        
                    except queue.Empty:
                        continue
                    except KeyboardInterrupt:
                        self.logger.info("üëã Interrompido pelo usu√°rio")
                        break
                        
        except Exception as e:
            self.logger.error(f"Erro no loop de escuta: {e}")
        finally:
            self.stop_listening()
    
    def stop_listening(self):
        """Para a escuta"""
        self.is_listening = False
        self.logger.info("üîá Escuta interrompida")
    
    # Comandos do sistema
    def _test_command(self):
        """Comando de teste"""
        self.logger.info("üß™ Comando de teste executado!")
        self.logger.info("‚úÖ Jarvis est√° funcionando perfeitamente!")
    
    def _show_time(self):
        """Mostra a hora atual"""
        time_str = self._get_time_string()
        self.logger.info(f"üïê Hora atual: {time_str}")
        # self._speak(f"S√£o {time_str}")  # TTS desabilitado
    
    def _show_date(self):
        """Mostra a data atual"""
        result = subprocess.run(["date"], capture_output=True, text=True)
        if result.returncode == 0:
            self.logger.info(f"üìÖ Data atual: {result.stdout.strip()}")
    
    def _open_browser(self):
        """Abre o navegador padr√£o"""
        subprocess.run(["xdg-open", "https://www.google.com"], check=False)
        self.logger.info("üåê Navegador aberto")
    
    def _system_status(self):
        """Mostra status do sistema"""
        result = subprocess.run(["uptime"], capture_output=True, text=True)
        if result.returncode == 0:
            self.logger.info(f"‚ö° Status do sistema: {result.stdout.strip()}")
    
    def _greeting_command(self):
        """Comando de sauda√ß√£o personalizado"""
        greeting = self._get_greeting()
        time_str = self._get_time_string()
        message = f"{greeting} {self.nome}, s√£o {time_str}."
        
        self.logger.info(f"üëã {message}")
        self._speak(message, force_speak=True)  # √önico comando que mant√©m fala ativa
    
    def _show_help(self):
        """Mostra comandos dispon√≠veis"""
        self.logger.info("üìã Comandos dispon√≠veis:")
        
        command_descriptions = {
            "teste": "Testa se o Jarvis est√° funcionando",
            "hora": "Mostra a hora atual",
            "data": "Mostra a data atual",
            "ajuda": "Lista todos os comandos dispon√≠veis",
            "navegador": "Abre o navegador Chrome",
            "status": "Mostra status do sistema",
            "ol√°": "Sauda√ß√£o personalizada",
            "trabalho": "Abre aplicativos de trabalho",
            "m√∫sica": "Abre o Spotify",
            "musica": "Abre o Spotify",
            "biblioteca": "Abre Cursor na pasta Bibliotech",
            "desliga": "Desliga o computador completamente",
            "fechar": "Encerra o Jarvis"
        }
        
        for command in sorted(self.commands.keys()):
            description = command_descriptions.get(command, "Comando dispon√≠vel")
            print(f"   - {command}: {description}")
    
    def _work_mode_command(self):
        """Abre todos os aplicativos de trabalho"""
        self.logger.info("üíº Iniciando modo de trabalho...")
        
        # Tocar som de trabalho
        try:
            self.logger.info("üîä Reproduzindo som de trabalho...")
            pygame.mixer.music.load("muhehe.mp3")
            pygame.mixer.music.play()
            
            # Aguardar a reprodu√ß√£o terminar
            while pygame.mixer.music.get_busy():
                pygame.time.wait(100)
                
            self.logger.info("‚úÖ Som de trabalho reproduzido")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è  Erro ao reproduzir som de trabalho: {e}")
        
        # Lista de aplicativos para abrir
        apps = [
            ("Slack", ["slack"]),
            ("Spotify", ["spotify"]),
            ("Cursor", ["cursor"]),
            ("Navegador", ["google-chrome"])
        ]
        
        opened_apps = []
        failed_apps = []
        
        for app_name, command in apps:
            try:
                self.logger.info(f"üöÄ Abrindo {app_name}...")
                subprocess.Popen(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                opened_apps.append(app_name)
                time.sleep(0.5)  # Pequena pausa entre aberturas
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è  Erro ao abrir {app_name}: {e}")
                failed_apps.append(app_name)
        
        # Relat√≥rio final
        if opened_apps:
            self.logger.info(f"‚úÖ Aplicativos abertos: {', '.join(opened_apps)}")
        
        if failed_apps:
            self.logger.warning(f"‚ùå Falha ao abrir: {', '.join(failed_apps)}")
        
        # Resposta por voz desabilitada
        if opened_apps:
            self.logger.info("üíº Aplicativos de trabalho abertos!")
        else:
            self.logger.error("‚ùå Nenhum aplicativo foi aberto")
            self.logger.info("üí° Desculpe, n√£o consegui abrir os aplicativos de trabalho.")
    
    def _open_library(self):
        """Abre Cursor na pasta Bibliotech"""
        try:
            library_path = os.path.expanduser("~/code/Bibliotech")
            self.logger.info(f"üìÅ Caminho da biblioteca: {library_path}")
            
            # Verificar se a pasta existe
            if not os.path.exists(library_path):
                self.logger.warning(f"‚ö†Ô∏è  Pasta n√£o encontrada: {library_path}")
                self.logger.info("üí° Criando pasta Bibliotech...")
                os.makedirs(library_path, exist_ok=True)
                self.logger.info("‚úÖ Pasta Bibliotech criada!")
            else:
                self.logger.info("‚úÖ Pasta Bibliotech j√° existe")
            
            # Abrir Cursor na pasta usando diferentes m√©todos
            self.logger.info(f"üìö Abrindo Cursor na pasta Bibliotech...")
            
            # M√©todo 1: Usar os.system (mais robusto com interfer√™ncia de √°udio)
            self.logger.info("üîÑ Tentativa 1: Usando os.system...")
            try:
                cmd = f"cd '{library_path}' && cursor . &"
                result = os.system(cmd)
                if result == 0:
                    self.logger.info("‚úÖ Cursor aberto com os.system!")
                    time.sleep(1)
                    # Tentar focar a janela
                    os.system("wmctrl -a 'Bibliotech' 2>/dev/null || true")
                    self.logger.info("üéâ Biblioteca aberta com sucesso!")
                    return
                else:
                    self.logger.warning(f"‚ö†Ô∏è  os.system retornou c√≥digo: {result}")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è  Erro com os.system: {e}")
            
            # M√©todo 2: Script tempor√°rio
            self.logger.info("üîÑ Tentativa 2: Usando script tempor√°rio...")
            script_path = "/tmp/jarvis_open_cursor.sh"
            try:
                with open(script_path, "w") as f:
                    f.write("#!/bin/bash\n")
                    f.write(f"cd '{library_path}'\n")
                    f.write("cursor . &\n")
                    f.write("sleep 1\n")
                    f.write("wmctrl -a 'Bibliotech' 2>/dev/null || true\n")
                
                # Tornar execut√°vel
                os.chmod(script_path, 0o755)
                
                # Executar o script
                result = subprocess.run([script_path], 
                                      capture_output=True, 
                                      text=True, 
                                      timeout=10)
                
                if result.returncode == 0:
                    self.logger.info("‚úÖ Script executado com sucesso!")
                    self.logger.info("üéâ Biblioteca aberta com sucesso!")
                    return
                else:
                    self.logger.warning(f"‚ö†Ô∏è  Script retornou c√≥digo: {result.returncode}")
                    if result.stderr:
                        self.logger.warning(f"Erro: {result.stderr}")
                        
            except subprocess.TimeoutExpired:
                self.logger.warning("‚ö†Ô∏è  Script demorou muito para executar")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è  Erro ao executar script: {e}")
            
            # M√©todo 3: Fallback com subprocess.Popen
            self.logger.info("üîÑ Tentativa 3: Usando subprocess.Popen...")
            try:
                process = subprocess.Popen(["cursor", library_path], 
                                         stdout=subprocess.DEVNULL, 
                                         stderr=subprocess.DEVNULL)
                time.sleep(2)
                
                if process.poll() is None:
                    self.logger.info("‚úÖ Cursor aberto via subprocess!")
                    self.logger.info("üéâ Biblioteca aberta com sucesso!")
                else:
                    self.logger.error("‚ùå Todos os m√©todos falharam")
                    self.logger.info("üí° Tente executar manualmente: cursor ~/code/Bibliotech")
                    
            except Exception as e:
                self.logger.error(f"‚ùå Erro no subprocess: {e}")
                self.logger.info("üí° Tente executar manualmente: cursor ~/code/Bibliotech")
            
            # Limpar script tempor√°rio
            try:
                os.remove(script_path)
            except:
                pass
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro inesperado: {e}")
            self.logger.info("üí° N√£o foi poss√≠vel abrir a biblioteca")
    
    def _open_music(self):
        """Abre o Spotify para m√∫sica"""
        try:
            self.logger.info("üéµ Abrindo Spotify...")
            
            # M√©todo 1: Usar os.system (mais robusto)
            self.logger.info("üîÑ Tentativa 1: Usando os.system...")
            try:
                cmd = "spotify &"
                result = os.system(cmd)
                if result == 0:
                    self.logger.info("‚úÖ Spotify aberto com os.system!")
                    time.sleep(1)
                    # Tentar focar a janela do Spotify
                    os.system("wmctrl -a 'Spotify' 2>/dev/null || true")
                    self.logger.info("üéâ Spotify aberto com sucesso!")
                    return
                else:
                    self.logger.warning(f"‚ö†Ô∏è  os.system retornou c√≥digo: {result}")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è  Erro com os.system: {e}")
            
            # M√©todo 2: Fallback com subprocess.Popen
            self.logger.info("üîÑ Tentativa 2: Usando subprocess.Popen...")
            try:
                process = subprocess.Popen(["spotify"], 
                                         stdout=subprocess.DEVNULL, 
                                         stderr=subprocess.DEVNULL)
                time.sleep(2)
                
                if process.poll() is None:
                    self.logger.info("‚úÖ Spotify aberto via subprocess!")
                    self.logger.info("üéâ Spotify aberto com sucesso!")
                else:
                    self.logger.error("‚ùå N√£o foi poss√≠vel abrir o Spotify")
                    self.logger.info("üí° Verifique se o Spotify est√° instalado")
                    self.logger.info("üí° Tente executar manualmente: spotify")
                    
            except Exception as e:
                self.logger.error(f"‚ùå Erro no subprocess: {e}")
                self.logger.info("üí° Tente executar manualmente: spotify")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro inesperado: {e}")
            self.logger.info("üí° N√£o foi poss√≠vel abrir o Spotify")
    
    def _shutdown_command(self):
        """Desliga o computador completamente"""
        self.logger.info("üîå Comando de desligamento recebido...")
        
        # Confirma√ß√£o por voz desabilitada
        self.logger.info("üîå Desligando o computador em 5 segundos...")
        
        # Aguarda 5 segundos
        for i in range(5, 0, -1):
            self.logger.info(f"‚è∞ Desligando em {i} segundos...")
            time.sleep(1)
        
        try:
            # Comando para desligar o sistema
            self.logger.info("üîå Executando comando de desligamento...")
            subprocess.run(["sudo", "shutdown", "-h", "now"], check=True)
        except subprocess.CalledProcessError as e:
            self.logger.error(f"‚ùå Erro ao desligar: {e}")
            self.logger.info("üí° Desculpe, n√£o consegui desligar o computador. Verifique as permiss√µes.")
        except Exception as e:
            self.logger.error(f"‚ùå Erro inesperado: {e}")
            self.logger.info("üí° Ocorreu um erro ao tentar desligar o computador.")
    
    def _close_jarvis(self):
        """Fecha o Jarvis com som de despedida"""
        self.logger.info("üëã Comando de fechamento recebido...")
        
        # Fechar cmatrix se estiver rodando
        self._stop_cmatrix()
        
        # Tocar som de fechamento
        try:
            self.logger.info("üîä Reproduzindo som de despedida...")
            pygame.mixer.music.load("fechar.mp3")
            pygame.mixer.music.play()
            
            # Aguardar a reprodu√ß√£o terminar
            while pygame.mixer.music.get_busy():
                pygame.time.wait(100)
                
            self.logger.info("‚úÖ Som de despedida reproduzido")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è  Erro ao reproduzir som de fechamento: {e}")
        
        # Parar a escuta
        self.logger.info("üîå Encerrando Jarvis...")
        self.is_listening = False
        
        # Log de despedida
        self.logger.info("‚úÖ Jarvis encerrado com sucesso!")
        print("\nüëã Jarvis encerrado. At√© logo!")
        
        # Encerrar o programa
        exit(0)


def main():
    """Fun√ß√£o principal"""
    print("ü§ñ Jarvis Final - Assistente de Voz Local")
    print("=" * 50)
    
    # Verificar argumentos
    hotword = "jarvis"
    model_path = None
    
    if len(sys.argv) > 1:
        hotword = sys.argv[1]
    if len(sys.argv) > 2:
        model_path = sys.argv[2]
    
    try:
        # Criar e inicializar o assistente
        jarvis = JarvisFinal(hotword=hotword, model_path=model_path)
        
        print(f"‚úÖ Jarvis Final inicializado com hotword: '{hotword}'")
        print("üé§ Escutando... (pressione Ctrl+C para sair)")
        print("üí° Diga 'Jarvis' seguido de um comando")
        print("üí° Comandos: teste, hora, data, ajuda, navegador, arquivos, status")
        print()
        
        # Iniciar escuta
        jarvis.start_listening()
        
    except KeyboardInterrupt:
        print("\nüëã Jarvis encerrado pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro fatal: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
